use crate::common::gf12::{gf_mul, Gf};

use super::SYS_T;

/// Multiply Gf elements `in0` and `in0` in GF((2^m)^t) and store result in `out`.
/// Called `GF_mul` in the C implementation.
pub(crate) fn gf_mul_inplace(out: &mut [Gf; SYS_T], in0: &[Gf; SYS_T], in1: &[Gf; SYS_T]) {
    let mut prod: [Gf; SYS_T * 2 - 1] = [0; SYS_T * 2 - 1];

    for i in 0..SYS_T {
        for j in 0..SYS_T {
            prod[i + j] ^= gf_mul(in0[i], in1[j]);
        }
    }

    for i in (SYS_T..=(SYS_T - 1) * 2).rev() {
        prod[i - SYS_T + 3] ^= prod[i];
        prod[i - SYS_T + 1] ^= prod[i];
        prod[i - SYS_T] ^= gf_mul(prod[i], 2);
    }

    out[0..SYS_T].copy_from_slice(&prod[0..SYS_T]);
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_gf_mul_inplace() {
        let mut res = [0u16; SYS_T];
        let mut arg1 = [0u16; SYS_T];
        let mut arg2 = [0u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [0u16; SYS_T];
        arg2 = [1u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [1u16; SYS_T];
        arg2 = [0u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [0u16; SYS_T];
        arg2 = [5u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [5u16; SYS_T];
        arg2 = [0u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5, 5, 5
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [0u16; SYS_T];
        arg2 = [1024u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [1024u16; SYS_T];
        arg2 = [0u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                1u16, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
                1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [2u16; SYS_T];
        arg2 = [6u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                25u16, 16, 28, 4, 28, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4,
                16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4,
                16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [6u16; SYS_T];
        arg2 = [2u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                25u16, 16, 28, 4, 28, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4,
                16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4,
                16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4, 16, 4
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [3u16; SYS_T];
        arg2 = [8u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                49u16, 35, 59, 11, 59, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11,
                35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35,
                11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11,
                35, 11
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [8u16; SYS_T];
        arg2 = [3u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                49u16, 35, 59, 11, 59, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11,
                35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35,
                11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11, 35, 11,
                35, 11
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [125u16; SYS_T];
        arg2 = [19u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                3759u16, 2455, 3776, 110, 3776, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110,
                2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455,
                110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110,
                2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455,
                110, 2455, 110, 2455, 110
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [19u16; SYS_T];
        arg2 = [125u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                3759u16, 2455, 3776, 110, 3776, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110,
                2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455,
                110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110,
                2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455, 110, 2455,
                110, 2455, 110, 2455, 110
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [125u16; SYS_T];
        arg2 = [37u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                3162u16, 554, 3075, 88, 3075, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [37u16; SYS_T];
        arg2 = [125u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                3162u16, 554, 3075, 88, 3075, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88, 554,
                88, 554, 88, 554, 88, 554, 88, 554, 88, 554, 88
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [4095u16; SYS_T];
        arg2 = [1u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                4086u16, 4086, 9, 4094, 9, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [1u16; SYS_T];
        arg2 = [4095u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                4086u16, 4086, 9, 4094, 9, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [8191u16; SYS_T];
        arg2 = [1u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                4068u16, 4068, 18, 4087, 18, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087,
                4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087,
                4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087,
                4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087,
                4068, 4087, 4068, 4087, 4068, 4087, 4068, 4087
            ]
        );
        res = [0u16; SYS_T];
        arg1 = [1u16; SYS_T];
        arg2 = [8191u16; SYS_T];
        arg1[0] = 1;
        arg2[0] = 1;
        gf_mul_inplace(&mut res, &arg1, &arg2);
        assert_eq!(
            res,
            [
                4086u16, 4086, 9, 4094, 9, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094,
                4086, 4094, 4086, 4094, 4086, 4094, 4086, 4094
            ]
        );
    }
}
